[
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "joblib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "joblib",
        "description": "joblib",
        "detail": "joblib",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "read_params",
        "importPath": "get_data",
        "description": "get_data",
        "isExtraImport": true,
        "detail": "get_data",
        "documentation": {}
    },
    {
        "label": "get_data",
        "importPath": "get_data",
        "description": "get_data",
        "isExtraImport": true,
        "detail": "get_data",
        "documentation": {}
    },
    {
        "label": "read_params",
        "importPath": "get_data",
        "description": "get_data",
        "isExtraImport": true,
        "detail": "get_data",
        "documentation": {}
    },
    {
        "label": "read_params",
        "importPath": "get_data",
        "description": "get_data",
        "isExtraImport": true,
        "detail": "get_data",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_absolute_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "ElasticNet",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "form_response",
        "importPath": "prediction_service.prediction",
        "description": "prediction_service.prediction",
        "isExtraImport": true,
        "detail": "prediction_service.prediction",
        "documentation": {}
    },
    {
        "label": "api_response",
        "importPath": "prediction_service.prediction",
        "description": "prediction_service.prediction",
        "isExtraImport": true,
        "detail": "prediction_service.prediction",
        "documentation": {}
    },
    {
        "label": "prediction_service",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "prediction_service",
        "description": "prediction_service",
        "detail": "prediction_service",
        "documentation": {}
    },
    {
        "label": "prediction",
        "importPath": "prediction_service",
        "description": "prediction_service",
        "isExtraImport": true,
        "detail": "prediction_service",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".tox..pkg.bin.activate_this",
        "description": ".tox..pkg.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": ".tox..pkg.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".tox..pkg.bin.activate_this",
        "description": ".tox..pkg.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]",
        "detail": ".tox..pkg.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".tox..pkg.bin.activate_this",
        "description": ".tox..pkg.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".tox..pkg.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".tox..pkg.bin.activate_this",
        "description": ".tox..pkg.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".tox..pkg.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".tox..pkg.bin.activate_this",
        "description": ".tox..pkg.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".tox..pkg.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".tox..pkg.bin.activate_this",
        "description": ".tox..pkg.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".tox..pkg.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".tox..pkg.bin.activate_this",
        "description": ".tox..pkg.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".tox..pkg.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".tox..pkg.bin.activate_this",
        "description": ".tox..pkg.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".tox..pkg.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".tox.py39.bin.activate_this",
        "description": ".tox.py39.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": ".tox.py39.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".tox.py39.bin.activate_this",
        "description": ".tox.py39.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]",
        "detail": ".tox.py39.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".tox.py39.bin.activate_this",
        "description": ".tox.py39.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".tox.py39.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".tox.py39.bin.activate_this",
        "description": ".tox.py39.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".tox.py39.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".tox.py39.bin.activate_this",
        "description": ".tox.py39.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".tox.py39.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".tox.py39.bin.activate_this",
        "description": ".tox.py39.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".tox.py39.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".tox.py39.bin.activate_this",
        "description": ".tox.py39.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".tox.py39.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".tox.py39.bin.activate_this",
        "description": ".tox.py39.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".tox.py39.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "NotInRange",
        "kind": 6,
        "importPath": "prediction_service.prediction",
        "description": "prediction_service.prediction",
        "peekOfCode": "class NotInRange(Exception):\n    def __init__(self, message=\"values entered are not in range\"):\n        self.message = message\n        super().__init__(self.message)\nclass NotInCols(Exception):\n    def __init__(self, message=\"Not in columns\"):\n        self.message = message\n        super().__init__(self.message)\n# ---------------------------------------------------------------\ndef read_params(config_path):",
        "detail": "prediction_service.prediction",
        "documentation": {}
    },
    {
        "label": "NotInCols",
        "kind": 6,
        "importPath": "prediction_service.prediction",
        "description": "prediction_service.prediction",
        "peekOfCode": "class NotInCols(Exception):\n    def __init__(self, message=\"Not in columns\"):\n        self.message = message\n        super().__init__(self.message)\n# ---------------------------------------------------------------\ndef read_params(config_path):\n    with open(config_path) as yaml_file:\n        config = yaml.safe_load(yaml_file)\n    return config\ndef predict(data):",
        "detail": "prediction_service.prediction",
        "documentation": {}
    },
    {
        "label": "read_params",
        "kind": 2,
        "importPath": "prediction_service.prediction",
        "description": "prediction_service.prediction",
        "peekOfCode": "def read_params(config_path):\n    with open(config_path) as yaml_file:\n        config = yaml.safe_load(yaml_file)\n    return config\ndef predict(data):\n    config = read_params(params_path)\n    model_dir_path = config[\"webapp_model_dir\"]\n    model = joblib.load(model_dir_path)\n    prediction = model.predict(data).tolist()[0]\n    # print(prediction[0])",
        "detail": "prediction_service.prediction",
        "documentation": {}
    },
    {
        "label": "predict",
        "kind": 2,
        "importPath": "prediction_service.prediction",
        "description": "prediction_service.prediction",
        "peekOfCode": "def predict(data):\n    config = read_params(params_path)\n    model_dir_path = config[\"webapp_model_dir\"]\n    model = joblib.load(model_dir_path)\n    prediction = model.predict(data).tolist()[0]\n    # print(prediction[0])\n    try:\n        if 3 <= prediction <= 8:\n            return prediction\n        else:",
        "detail": "prediction_service.prediction",
        "documentation": {}
    },
    {
        "label": "get_schema",
        "kind": 2,
        "importPath": "prediction_service.prediction",
        "description": "prediction_service.prediction",
        "peekOfCode": "def get_schema(schema_path=schema_path):\n    with open(schema_path) as json_file:\n        schema = json.load(json_file)\n    return schema\ndef validate_input(dict_request):\n    def _validate_cols(col):\n        schema = get_schema()\n        actual_col = schema.keys()\n        if col not in actual_col:\n            raise NotInCols",
        "detail": "prediction_service.prediction",
        "documentation": {}
    },
    {
        "label": "validate_input",
        "kind": 2,
        "importPath": "prediction_service.prediction",
        "description": "prediction_service.prediction",
        "peekOfCode": "def validate_input(dict_request):\n    def _validate_cols(col):\n        schema = get_schema()\n        actual_col = schema.keys()\n        if col not in actual_col:\n            raise NotInCols\n    def _validate_values(col, val):\n        schema = get_schema()\n        if not (schema[col]['min'] <= float(dict_request[col]) <= schema[col]['max']):\n            raise NotInRange",
        "detail": "prediction_service.prediction",
        "documentation": {}
    },
    {
        "label": "form_response",
        "kind": 2,
        "importPath": "prediction_service.prediction",
        "description": "prediction_service.prediction",
        "peekOfCode": "def form_response(dict_request):\n    if validate_input(dict_request):\n        data = dict_request.values()\n        data = [list(map(float, data))]\n        response = predict(data)\n        return response\ndef api_response(dict_request):\n    try:\n        if validate_input(dict_request):\n            data = np.array([list(dict_request.values())])",
        "detail": "prediction_service.prediction",
        "documentation": {}
    },
    {
        "label": "api_response",
        "kind": 2,
        "importPath": "prediction_service.prediction",
        "description": "prediction_service.prediction",
        "peekOfCode": "def api_response(dict_request):\n    try:\n        if validate_input(dict_request):\n            data = np.array([list(dict_request.values())])\n            response = predict(data)\n            response = {\"response\": response}\n            return response\n    except Exception as e:\n        response = {\n            \"the_expected_range\": get_schema(),",
        "detail": "prediction_service.prediction",
        "documentation": {}
    },
    {
        "label": "params_path",
        "kind": 5,
        "importPath": "prediction_service.prediction",
        "description": "prediction_service.prediction",
        "peekOfCode": "params_path = \"params.yaml\"\nschema_path = os.path.join(\"prediction_service\", \"schema_in.json\")\n# ---------------------------------------------------------------\nclass NotInRange(Exception):\n    def __init__(self, message=\"values entered are not in range\"):\n        self.message = message\n        super().__init__(self.message)\nclass NotInCols(Exception):\n    def __init__(self, message=\"Not in columns\"):\n        self.message = message",
        "detail": "prediction_service.prediction",
        "documentation": {}
    },
    {
        "label": "schema_path",
        "kind": 5,
        "importPath": "prediction_service.prediction",
        "description": "prediction_service.prediction",
        "peekOfCode": "schema_path = os.path.join(\"prediction_service\", \"schema_in.json\")\n# ---------------------------------------------------------------\nclass NotInRange(Exception):\n    def __init__(self, message=\"values entered are not in range\"):\n        self.message = message\n        super().__init__(self.message)\nclass NotInCols(Exception):\n    def __init__(self, message=\"Not in columns\"):\n        self.message = message\n        super().__init__(self.message)",
        "detail": "prediction_service.prediction",
        "documentation": {}
    },
    {
        "label": "read_params",
        "kind": 2,
        "importPath": "src.get_data",
        "description": "src.get_data",
        "peekOfCode": "def read_params(config_path):\n    with open(config_path) as yaml_file:\n        config = yaml.safe_load(yaml_file)\n    return config\ndef get_data(config_path):\n    config = read_params(config_path)\n    # print(config)\n    data_path = config[\"data_source\"][\"s3_source\"]\n    df = pd.read_csv(data_path, sep=',', encoding='utf-8')\n    # print(df.head())",
        "detail": "src.get_data",
        "documentation": {}
    },
    {
        "label": "get_data",
        "kind": 2,
        "importPath": "src.get_data",
        "description": "src.get_data",
        "peekOfCode": "def get_data(config_path):\n    config = read_params(config_path)\n    # print(config)\n    data_path = config[\"data_source\"][\"s3_source\"]\n    df = pd.read_csv(data_path, sep=',', encoding='utf-8')\n    # print(df.head())\n    return df\nif __name__ == \"__main__\":\n    args = argparse.ArgumentParser()\n    args.add_argument(\"--config\", default=\"params.yaml\")",
        "detail": "src.get_data",
        "documentation": {}
    },
    {
        "label": "load_and_save",
        "kind": 2,
        "importPath": "src.load_data",
        "description": "src.load_data",
        "peekOfCode": "def load_and_save(config_path):\n    config = read_params(config_path)\n    df = get_data(config_path)\n    new_cols = [col.replace(\" \", \"_\") for col in df.columns]\n    raw_data_path = config[\"load_data\"][\"raw_dataset_csv\"]\n    df.to_csv(raw_data_path, sep=\",\", index=False, header=new_cols)\nif __name__ == \"__main__\":\n    args = argparse.ArgumentParser()\n    args.add_argument(\"--config\", default=\"params.yaml\")\n    parsed_args = args.parse_args()",
        "detail": "src.load_data",
        "documentation": {}
    },
    {
        "label": "split_and_saved_data",
        "kind": 2,
        "importPath": "src.split_data",
        "description": "src.split_data",
        "peekOfCode": "def split_and_saved_data(config_path):\n    config = read_params(config_path=config_path)\n    test_data_path = config[\"split_data\"][\"test_path\"]\n    train_data_path = config[\"split_data\"][\"train_path\"]\n    raw_data_path = config[\"load_data\"][\"raw_dataset_csv\"]\n    split_ratio = config[\"split_data\"][\"test_size\"]\n    random_state = config[\"base\"][\"random_state\"]\n    df = pd.read_csv(raw_data_path, sep=',')\n    train, test = train_test_split(\n        df,",
        "detail": "src.split_data",
        "documentation": {}
    },
    {
        "label": "eval_metrics",
        "kind": 2,
        "importPath": "src.train_and_evaluate",
        "description": "src.train_and_evaluate",
        "peekOfCode": "def eval_metrics(y_true, y_pred):\n    rmse = mean_squared_error(y_true, y_pred)\n    mae = mean_absolute_error(y_true, y_pred)\n    r2 = r2_score(y_true, y_pred)\n    return rmse, mae, r2\ndef train_and_evaluate(config_path):\n    config = read_params(config_path)\n    test_data_path = config[\"split_data\"][\"test_path\"]\n    train_data_path = config[\"split_data\"][\"train_path\"]\n    random_state = config[\"base\"][\"random_state\"]",
        "detail": "src.train_and_evaluate",
        "documentation": {}
    },
    {
        "label": "train_and_evaluate",
        "kind": 2,
        "importPath": "src.train_and_evaluate",
        "description": "src.train_and_evaluate",
        "peekOfCode": "def train_and_evaluate(config_path):\n    config = read_params(config_path)\n    test_data_path = config[\"split_data\"][\"test_path\"]\n    train_data_path = config[\"split_data\"][\"train_path\"]\n    random_state = config[\"base\"][\"random_state\"]\n    model_dir = config[\"model_dir\"]\n    alpha = config[\"estimator\"][\"ElasticNet\"][\"params\"][\"alpha\"]\n    l1_ratio = config[\"estimator\"][\"ElasticNet\"][\"params\"][\"l1_ratio\"]\n    target = [config[\"base\"][\"target_col\"]]\n    train = pd.read_csv(train_data_path, sep=',', encoding=\"utf-8\")",
        "detail": "src.train_and_evaluate",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def config(config_path=\"params.yaml\"):\n    with open(config_path) as yaml_file:\n        config = yaml.safe_load(yaml_file)\n    return config \n@pytest.fixture \ndef schema_in(schema_path=\"schema_in.json\"):\n    with open(schema_path) as json_file:\n        schema = json.load(json_file)\n    return schema",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "schema_in",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def schema_in(schema_path=\"schema_in.json\"):\n    with open(schema_path) as json_file:\n        schema = json.load(json_file)\n    return schema",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "test_form_response_correct_range",
        "kind": 2,
        "importPath": "tests.test_config",
        "description": "tests.test_config",
        "peekOfCode": "def test_form_response_correct_range(data=input_data[\"correct_range\"]):\n    res = form_response(data)\n    assert TARGET_range[\"min\"] <= res <= TARGET_range[\"max\"]\ndef test_api_response_correct_range(data=input_data[\"correct_range\"]):\n    res = api_response(data)\n    assert TARGET_range[\"min\"] <= res[\"response\"] <= TARGET_range[\"max\"]",
        "detail": "tests.test_config",
        "documentation": {}
    },
    {
        "label": "test_api_response_correct_range",
        "kind": 2,
        "importPath": "tests.test_config",
        "description": "tests.test_config",
        "peekOfCode": "def test_api_response_correct_range(data=input_data[\"correct_range\"]):\n    res = api_response(data)\n    assert TARGET_range[\"min\"] <= res[\"response\"] <= TARGET_range[\"max\"]",
        "detail": "tests.test_config",
        "documentation": {}
    },
    {
        "label": "input_data",
        "kind": 5,
        "importPath": "tests.test_config",
        "description": "tests.test_config",
        "peekOfCode": "input_data = {\n    \"incorrect_range\": {\n        \"fixed_acidity\": 100,\n        \"volatile_acidity\":85,\n        \"citric_acid\":45,\n        \"residual_sugar\":25,\n        \"chlorides\":55,\n        \"free_sulfur_dioxide\":80,\n        \"total_sulfur_dioxide\":400,\n        \"density\":5,",
        "detail": "tests.test_config",
        "documentation": {}
    },
    {
        "label": "TARGET_range",
        "kind": 5,
        "importPath": "tests.test_config",
        "description": "tests.test_config",
        "peekOfCode": "TARGET_range = {\n    \"min\" : 3.0,\n    \"max\" : 8.0\n}\ndef test_form_response_correct_range(data=input_data[\"correct_range\"]):\n    res = form_response(data)\n    assert TARGET_range[\"min\"] <= res <= TARGET_range[\"max\"]\ndef test_api_response_correct_range(data=input_data[\"correct_range\"]):\n    res = api_response(data)\n    assert TARGET_range[\"min\"] <= res[\"response\"] <= TARGET_range[\"max\"]",
        "detail": "tests.test_config",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def index():\n    if request.method == \"POST\":\n        try:\n            if request.form:\n                data_req = dict(request.form)\n                response = prediction.form_response(data_req)\n                return render_template(\"index.html\", response=response)\n            elif request.json:\n                response = prediction.api_response(request.json)\n                return jsonify(response)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "webapp_root",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "webapp_root = \"webapp\"\nstatic_dir = os.path.join(webapp_root, \"static\")\ntemplate_dir = os.path.join(webapp_root, \"templates\")\napp = Flask(__name__, static_folder=static_dir, template_folder=template_dir)\n# ----------------------------------------------------------------------------------\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    if request.method == \"POST\":\n        try:\n            if request.form:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "static_dir",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "static_dir = os.path.join(webapp_root, \"static\")\ntemplate_dir = os.path.join(webapp_root, \"templates\")\napp = Flask(__name__, static_folder=static_dir, template_folder=template_dir)\n# ----------------------------------------------------------------------------------\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    if request.method == \"POST\":\n        try:\n            if request.form:\n                data_req = dict(request.form)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "template_dir",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "template_dir = os.path.join(webapp_root, \"templates\")\napp = Flask(__name__, static_folder=static_dir, template_folder=template_dir)\n# ----------------------------------------------------------------------------------\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    if request.method == \"POST\":\n        try:\n            if request.form:\n                data_req = dict(request.form)\n                response = prediction.form_response(data_req)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__, static_folder=static_dir, template_folder=template_dir)\n# ----------------------------------------------------------------------------------\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    if request.method == \"POST\":\n        try:\n            if request.form:\n                data_req = dict(request.form)\n                response = prediction.form_response(data_req)\n                return render_template(\"index.html\", response=response)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "dirs",
        "kind": 5,
        "importPath": "template",
        "description": "template",
        "peekOfCode": "dirs = [\n    os.path.join(\"data\", \"raw\"),\n    os.path.join(\"data\",\"processed\"),\n    \"notebooks\",\n    \"saved_models\",\n    \"src\"\n]\nfor dir_ in dirs:\n    os.makedirs(dir_, exist_ok=True)\n    with open(os.path.join(dir_, \".gitkeep\"), \"w\") as f:",
        "detail": "template",
        "documentation": {}
    },
    {
        "label": "file_",
        "kind": 5,
        "importPath": "template",
        "description": "template",
        "peekOfCode": "file_ = [\n    \"dvc.yaml\",\n    \"params.yaml\",\n    \".gitignore\",\n    os.path.join(\"src\",\"__init__.py\"),\n]\nfor file in file_:\n    with open(file, \"w\") as f:\n        pass",
        "detail": "template",
        "documentation": {}
    }
]