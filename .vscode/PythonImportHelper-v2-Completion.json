[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "read_params",
        "importPath": "get_data",
        "description": "get_data",
        "isExtraImport": true,
        "detail": "get_data",
        "documentation": {}
    },
    {
        "label": "get_data",
        "importPath": "get_data",
        "description": "get_data",
        "isExtraImport": true,
        "detail": "get_data",
        "documentation": {}
    },
    {
        "label": "read_params",
        "importPath": "get_data",
        "description": "get_data",
        "isExtraImport": true,
        "detail": "get_data",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "read_params",
        "kind": 2,
        "importPath": "src.get_data",
        "description": "src.get_data",
        "peekOfCode": "def read_params(config_path):\n    with open(config_path) as yaml_file:\n        config = yaml.safe_load(yaml_file)\n    return config\ndef get_data(config_path):\n    config = read_params(config_path)\n    # print(config)\n    data_path = config[\"data_source\"][\"s3_source\"]\n    df = pd.read_csv(data_path, sep=',', encoding='utf-8')\n    # print(df.head())",
        "detail": "src.get_data",
        "documentation": {}
    },
    {
        "label": "get_data",
        "kind": 2,
        "importPath": "src.get_data",
        "description": "src.get_data",
        "peekOfCode": "def get_data(config_path):\n    config = read_params(config_path)\n    # print(config)\n    data_path = config[\"data_source\"][\"s3_source\"]\n    df = pd.read_csv(data_path, sep=',', encoding='utf-8')\n    # print(df.head())\n    return df\nif __name__ == \"__main__\":\n    args = argparse.ArgumentParser()\n    args.add_argument(\"--config\", default=\"params.yaml\")",
        "detail": "src.get_data",
        "documentation": {}
    },
    {
        "label": "load_and_save",
        "kind": 2,
        "importPath": "src.load_data",
        "description": "src.load_data",
        "peekOfCode": "def load_and_save(config_path):\n    config = read_params(config_path)\n    df = get_data(config_path)\n    new_cols = [col.replace(\" \", \"_\") for col in df.columns]\n    raw_data_path = config[\"load_data\"][\"raw_dataset_csv\"]\n    df.to_csv(raw_data_path, sep=\",\", index=False, header=new_cols)\nif __name__ == \"__main__\":\n    args = argparse.ArgumentParser() \n    args.add_argument(\"--config\", default=\"params.yaml\")\n    parsed_args = args.parse_args()",
        "detail": "src.load_data",
        "documentation": {}
    },
    {
        "label": "split_and_saved_data",
        "kind": 2,
        "importPath": "src.split_data",
        "description": "src.split_data",
        "peekOfCode": "def split_and_saved_data(config_path):\n    config = read_params(config_path=config_path) \n    test_data_path = config[\"split_data\"][\"test_path\"]\n    train_data_path = config[\"split_data\"][\"train_path\"]\n    raw_data_path = config[\"load_data\"][\"raw_dataset_csv\"]\n    split_ratio = config[\"split_data\"][\"test_size\"]\n    random_state = config[\"base\"][\"random_state\"]\n    df = pd.read_csv(raw_data_path, sep=',')\n    train, test = train_test_split(\n        df,",
        "detail": "src.split_data",
        "documentation": {}
    },
    {
        "label": "dirs",
        "kind": 5,
        "importPath": "template",
        "description": "template",
        "peekOfCode": "dirs = [\n    os.path.join(\"data\", \"raw\"),\n    os.path.join(\"data\",\"processed\"),\n    \"notebooks\",\n    \"saved_models\",\n    \"src\"\n]\nfor dir_ in dirs:\n    os.makedirs(dir_, exist_ok=True)\n    with open(os.path.join(dir_, \".gitkeep\"), \"w\") as f:",
        "detail": "template",
        "documentation": {}
    },
    {
        "label": "file_",
        "kind": 5,
        "importPath": "template",
        "description": "template",
        "peekOfCode": "file_ = [\n    \"dvc.yaml\",\n    \"params.yaml\",\n    \".gitignore\",\n    os.path.join(\"src\",\"__init__.py\"),\n]\nfor file in file_:\n    with open(file, \"w\") as f:\n        pass",
        "detail": "template",
        "documentation": {}
    }
]